mod abi;
mod pb;
use hex_literal::hex;
use pb::contract::v1 as contract;
use substreams::Hex;
use substreams_database_change::pb::database::DatabaseChanges;
use substreams_database_change::tables::Tables as DatabaseChangeTables;
use substreams_entity_change::pb::entity::EntityChanges;
use substreams_entity_change::tables::Tables as EntityChangesTables;
use substreams_ethereum::pb::eth::v2 as eth;
use substreams_ethereum::Event;

#[allow(unused_imports)]
use num_traits::cast::ToPrimitive;

substreams_ethereum::init!();

{{ range $i, $contract := .ethereumContracts -}}
const {{ toUpper $contract.GetName }}_TRACKED_CONTRACT: [u8; 20] = hex!("{{ $contract.GetAddress }}");
{{ end -}}
{{ $numberOfContracts := len .ethereumContracts }}

{{- range $i, $contract := .ethereumContracts }}
fn map_{{ $contract.GetName }}_events(blk: &eth::Block, events: &mut contract::Events) {
    {{- range $event := $contract.GetEvents }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.GetName }}_{{ $rust.ProtoOutputModuleFieldName }}.append(&mut blk
        .receipts()
        .flat_map(|view| {
            view.receipt.logs.iter()
                .filter(|log| log.address == {{ toUpper $contract.GetName }}_TRACKED_CONTRACT)
                .filter_map(|log| {
                    if let Some(event) = abi::{{ if eq $numberOfContracts 1 }}contract{{ else }}{{ $contract.GetName }}_contract{{ end }}::events::{{$rust.ABIStructName}}::match_and_decode(log) {
                        return Some(contract::{{ capitalizeFirst $contract.GetName }}{{$rust.ProtoMessageName}} {
                            evt_tx_hash: Hex(&view.transaction.hash).to_string(),
                            evt_index: log.block_index,
                            evt_block_time: Some(blk.timestamp().to_owned()),
                            evt_block_number: blk.number,
                            {{- range $protoField, $abiToProtoConversion := $rust.ProtoFieldABIConversionMap }}
                            {{$protoField}}: {{$abiToProtoConversion}},
                            {{- end}}
                        });
                    }

                    None
            })
        })
        .collect());
    {{- end }}
}
{{ end }}

{{- range $i, $contract := .ethereumContracts }}
fn db_{{ $contract.GetName }}_out(events: &contract::Events, tables: &mut DatabaseChangeTables) {
    // Loop over all the abis events to create table changes
    {{- range $event := $contract.GetEvents }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.GetName }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ if eq $numberOfContracts 1 }}{{ $rust.ProtoOutputModuleFieldName }}{{ else }}{{ $contract.GetName }}_{{ $rust.ProtoOutputModuleFieldName }}{{ end }}", format!("{}-{}", evt.evt_tx_hash, evt.evt_index))
            .set("evt_tx_hash", &evt.evt_tx_hash)
            .set("evt_index", evt.evt_index)
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $databaseChangesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$databaseChangesToProtoConversion}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
    {{- end}}
}
{{- end }}

{{ range $i, $contract := .ethereumContracts }}
fn graph_{{ $contract.GetName }}_out(events: &contract::Events, tables: &mut EntityChangesTables) {
    // Loop over all the abis events to create table changes
    {{- range $event := $contract.GetEvents }}
    {{- $rust := $event.Rust }}
    events.{{ $contract.GetName }}_{{ $rust.ProtoOutputModuleFieldName }}.iter().for_each(|evt| {
        tables
            .create_row("{{ if eq $numberOfContracts 1 }}{{ $rust.ProtoOutputModuleFieldName }}{{ else }}{{ $contract.GetName }}_{{ $rust.ProtoOutputModuleFieldName }}{{ end }}", format!("{}-{}", evt.evt_tx_hash, evt.evt_index))
            .set("evt_tx_hash", &evt.evt_tx_hash)
            .set("evt_index", evt.evt_index)
            .set("evt_block_time", evt.evt_block_time.as_ref().unwrap())
            .set("evt_block_number", evt.evt_block_number)
            {{- $numberOfAttributes := len $rust.ProtoFieldTableChangesMap }}{{ if eq $numberOfAttributes 0 }};{{ end }}
            {{- $i := 0 }}
            {{- range $protoField, $databaseChangesToProtoConversion := $rust.ProtoFieldTableChangesMap }}
            {{ $i = add $i 1 }}.set("{{$protoField}}", {{$databaseChangesToProtoConversion}}){{if eq $i $numberOfAttributes}};{{ end }}
            {{- end}}
    });
{{- end}}
}
{{- end }}

#[substreams::handlers::map]
fn map_events(blk: eth::Block) -> Result<contract::Events, substreams::errors::Error> {
    let mut events = contract::Events::default();
    {{- range $i, $contract := .ethereumContracts }}
    map_{{ $contract.GetName }}_events(&blk, &mut events);
    {{- end }}
    Ok(events)
}

#[substreams::handlers::map]
fn db_out(events: contract::Events) -> Result<DatabaseChanges, substreams::errors::Error> {
    // Initialize Database Changes container
    let mut tables = DatabaseChangeTables::new();
    {{- range $i, $contract := .ethereumContracts }}
    db_{{ $contract.GetName }}_out(&events, &mut tables);
    {{- end }}
    Ok(tables.to_database_changes())
}

#[substreams::handlers::map]
fn graph_out(events: contract::Events) -> Result<EntityChanges, substreams::errors::Error> {
    // Initialize Database Changes container
    let mut tables = EntityChangesTables::new();
    {{- range $i, $contract := .ethereumContracts }}
    graph_{{ $contract.GetName }}_out(&events, &mut tables);
    {{- end }}
    Ok(tables.to_entity_changes())
}
